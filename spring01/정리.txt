1. 클래스를 Controller 라는 이름으로 만든다.
2. @Controller 를 지정한다.
3. 요청에 대한 처리:
   메소드 선언 -> 메소드에 @RequestMapping 선언
                       (주소창의 요청이 뭐라고 들어왔을 때 이 메소드를 실행하도록 연결할 것인지)
             -> 메소드 내부에서는 비지니스 로직 처리를 선언
             -> 화면 응답
                return "화면명" : WEB-INF/view/화면명.jsp

화면연결 형태
1. Model을 사용해 화면연결
Model은 파라미터로 선언한 후 해당 변수에 화면에 출력할 정보를 담고, addAttribute()
응답화면명을 return 한다.

2. ModelAndView를 사용해 화면연결
ModelAndView 객체 생성
생성한 객체에 화면에 출력할 정보를 담고 addObject()
응답화면명을 지정 setViewName()
생성한 객체를 return 한다.

파라미터 접근 방법
1. HttpServletRequest 객체의 getParameter()로 파라미터를 접근
2. @RequestParam을 사용해 파라미터를 접근
3. 데이터 객체(DTO, VO, Domain)을 사용해 파라미터를 접근

파라미터는 아니지만, 특정 값 한 두개 정도를 경로의 형태로 전달하고자 할 때
@PathVariable을 사용해 경로에 해당하는 값을 접근 
===================1207============================================
개발자가 직접 객체를 생성하고 메소드를 호출하던 처리를 스프링이 한다.
객체 생성의 주체가 스프링이 된다. IoC(Inversion of Control : 제어의 반전)
- 스프링 IoC는 스프링에게 제어를 위임해서 스프링이 객체를 만들고 관리하는 구조

스프링 컨테이너에 관리되어 있는 객체의 주소를 주입시켜주는 형태
: DI(Dependency Injection)